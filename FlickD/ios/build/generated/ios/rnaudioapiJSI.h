/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateModuleH.js
 */

#pragma once

#include <ReactCommon/TurboModule.h>
#include <react/bridging/Bridging.h>

namespace facebook::react {


  class JSI_EXPORT NativeAudioAPIModuleCxxSpecJSI : public TurboModule {
protected:
  NativeAudioAPIModuleCxxSpecJSI(std::shared_ptr<CallInvoker> jsInvoker);

public:
  virtual bool install(jsi::Runtime &rt) = 0;
  virtual double getDevicePreferredSampleRate(jsi::Runtime &rt) = 0;
  virtual jsi::Value setAudioSessionActivity(jsi::Runtime &rt, bool enabled) = 0;
  virtual void setAudioSessionOptions(jsi::Runtime &rt, jsi::String category, jsi::String mode, jsi::Array options, bool allowHaptics) = 0;
  virtual void setLockScreenInfo(jsi::Runtime &rt, jsi::Object info) = 0;
  virtual void resetLockScreenInfo(jsi::Runtime &rt) = 0;
  virtual void enableRemoteCommand(jsi::Runtime &rt, jsi::String name, bool enabled) = 0;
  virtual void observeAudioInterruptions(jsi::Runtime &rt, bool enabled) = 0;
  virtual void observeVolumeChanges(jsi::Runtime &rt, bool enabled) = 0;
  virtual jsi::Value requestRecordingPermissions(jsi::Runtime &rt) = 0;
  virtual jsi::Value checkRecordingPermissions(jsi::Runtime &rt) = 0;
  virtual jsi::Value getDevicesInfo(jsi::Runtime &rt) = 0;

};

template <typename T>
class JSI_EXPORT NativeAudioAPIModuleCxxSpec : public TurboModule {
public:
  jsi::Value create(jsi::Runtime &rt, const jsi::PropNameID &propName) override {
    return delegate_.create(rt, propName);
  }

  std::vector<jsi::PropNameID> getPropertyNames(jsi::Runtime& runtime) override {
    return delegate_.getPropertyNames(runtime);
  }

  static constexpr std::string_view kModuleName = "AudioAPIModule";

protected:
  NativeAudioAPIModuleCxxSpec(std::shared_ptr<CallInvoker> jsInvoker)
    : TurboModule(std::string{NativeAudioAPIModuleCxxSpec::kModuleName}, jsInvoker),
      delegate_(reinterpret_cast<T*>(this), jsInvoker) {}


private:
  class Delegate : public NativeAudioAPIModuleCxxSpecJSI {
  public:
    Delegate(T *instance, std::shared_ptr<CallInvoker> jsInvoker) :
      NativeAudioAPIModuleCxxSpecJSI(std::move(jsInvoker)), instance_(instance) {

    }

    bool install(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::install) == 1,
          "Expected install(...) to have 1 parameters");

      return bridging::callFromJs<bool>(
          rt, &T::install, jsInvoker_, instance_);
    }
    double getDevicePreferredSampleRate(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::getDevicePreferredSampleRate) == 1,
          "Expected getDevicePreferredSampleRate(...) to have 1 parameters");

      return bridging::callFromJs<double>(
          rt, &T::getDevicePreferredSampleRate, jsInvoker_, instance_);
    }
    jsi::Value setAudioSessionActivity(jsi::Runtime &rt, bool enabled) override {
      static_assert(
          bridging::getParameterCount(&T::setAudioSessionActivity) == 2,
          "Expected setAudioSessionActivity(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::setAudioSessionActivity, jsInvoker_, instance_, std::move(enabled));
    }
    void setAudioSessionOptions(jsi::Runtime &rt, jsi::String category, jsi::String mode, jsi::Array options, bool allowHaptics) override {
      static_assert(
          bridging::getParameterCount(&T::setAudioSessionOptions) == 5,
          "Expected setAudioSessionOptions(...) to have 5 parameters");

      return bridging::callFromJs<void>(
          rt, &T::setAudioSessionOptions, jsInvoker_, instance_, std::move(category), std::move(mode), std::move(options), std::move(allowHaptics));
    }
    void setLockScreenInfo(jsi::Runtime &rt, jsi::Object info) override {
      static_assert(
          bridging::getParameterCount(&T::setLockScreenInfo) == 2,
          "Expected setLockScreenInfo(...) to have 2 parameters");

      return bridging::callFromJs<void>(
          rt, &T::setLockScreenInfo, jsInvoker_, instance_, std::move(info));
    }
    void resetLockScreenInfo(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::resetLockScreenInfo) == 1,
          "Expected resetLockScreenInfo(...) to have 1 parameters");

      return bridging::callFromJs<void>(
          rt, &T::resetLockScreenInfo, jsInvoker_, instance_);
    }
    void enableRemoteCommand(jsi::Runtime &rt, jsi::String name, bool enabled) override {
      static_assert(
          bridging::getParameterCount(&T::enableRemoteCommand) == 3,
          "Expected enableRemoteCommand(...) to have 3 parameters");

      return bridging::callFromJs<void>(
          rt, &T::enableRemoteCommand, jsInvoker_, instance_, std::move(name), std::move(enabled));
    }
    void observeAudioInterruptions(jsi::Runtime &rt, bool enabled) override {
      static_assert(
          bridging::getParameterCount(&T::observeAudioInterruptions) == 2,
          "Expected observeAudioInterruptions(...) to have 2 parameters");

      return bridging::callFromJs<void>(
          rt, &T::observeAudioInterruptions, jsInvoker_, instance_, std::move(enabled));
    }
    void observeVolumeChanges(jsi::Runtime &rt, bool enabled) override {
      static_assert(
          bridging::getParameterCount(&T::observeVolumeChanges) == 2,
          "Expected observeVolumeChanges(...) to have 2 parameters");

      return bridging::callFromJs<void>(
          rt, &T::observeVolumeChanges, jsInvoker_, instance_, std::move(enabled));
    }
    jsi::Value requestRecordingPermissions(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::requestRecordingPermissions) == 1,
          "Expected requestRecordingPermissions(...) to have 1 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::requestRecordingPermissions, jsInvoker_, instance_);
    }
    jsi::Value checkRecordingPermissions(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::checkRecordingPermissions) == 1,
          "Expected checkRecordingPermissions(...) to have 1 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::checkRecordingPermissions, jsInvoker_, instance_);
    }
    jsi::Value getDevicesInfo(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::getDevicesInfo) == 1,
          "Expected getDevicesInfo(...) to have 1 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::getDevicesInfo, jsInvoker_, instance_);
    }

  private:
    friend class NativeAudioAPIModuleCxxSpec;
    T *instance_;
  };

  Delegate delegate_;
};

} // namespace facebook::react
