/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateModuleCpp.js
 */

#include "rnaudioapiJSI.h"

namespace facebook::react {

static jsi::Value __hostFunction_NativeAudioAPIModuleCxxSpecJSI_install(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeAudioAPIModuleCxxSpecJSI *>(&turboModule)->install(
    rt
  );
}
static jsi::Value __hostFunction_NativeAudioAPIModuleCxxSpecJSI_getDevicePreferredSampleRate(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeAudioAPIModuleCxxSpecJSI *>(&turboModule)->getDevicePreferredSampleRate(
    rt
  );
}
static jsi::Value __hostFunction_NativeAudioAPIModuleCxxSpecJSI_setAudioSessionActivity(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeAudioAPIModuleCxxSpecJSI *>(&turboModule)->setAudioSessionActivity(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asBool()
  );
}
static jsi::Value __hostFunction_NativeAudioAPIModuleCxxSpecJSI_setAudioSessionOptions(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  static_cast<NativeAudioAPIModuleCxxSpecJSI *>(&turboModule)->setAudioSessionOptions(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asString(rt),
    count <= 2 ? throw jsi::JSError(rt, "Expected argument in position 2 to be passed") : args[2].asObject(rt).asArray(rt),
    count <= 3 ? throw jsi::JSError(rt, "Expected argument in position 3 to be passed") : args[3].asBool()
  );
  return jsi::Value::undefined();
}
static jsi::Value __hostFunction_NativeAudioAPIModuleCxxSpecJSI_setLockScreenInfo(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  static_cast<NativeAudioAPIModuleCxxSpecJSI *>(&turboModule)->setLockScreenInfo(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asObject(rt)
  );
  return jsi::Value::undefined();
}
static jsi::Value __hostFunction_NativeAudioAPIModuleCxxSpecJSI_resetLockScreenInfo(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  static_cast<NativeAudioAPIModuleCxxSpecJSI *>(&turboModule)->resetLockScreenInfo(
    rt
  );
  return jsi::Value::undefined();
}
static jsi::Value __hostFunction_NativeAudioAPIModuleCxxSpecJSI_enableRemoteCommand(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  static_cast<NativeAudioAPIModuleCxxSpecJSI *>(&turboModule)->enableRemoteCommand(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asBool()
  );
  return jsi::Value::undefined();
}
static jsi::Value __hostFunction_NativeAudioAPIModuleCxxSpecJSI_observeAudioInterruptions(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  static_cast<NativeAudioAPIModuleCxxSpecJSI *>(&turboModule)->observeAudioInterruptions(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asBool()
  );
  return jsi::Value::undefined();
}
static jsi::Value __hostFunction_NativeAudioAPIModuleCxxSpecJSI_observeVolumeChanges(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  static_cast<NativeAudioAPIModuleCxxSpecJSI *>(&turboModule)->observeVolumeChanges(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asBool()
  );
  return jsi::Value::undefined();
}
static jsi::Value __hostFunction_NativeAudioAPIModuleCxxSpecJSI_requestRecordingPermissions(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeAudioAPIModuleCxxSpecJSI *>(&turboModule)->requestRecordingPermissions(
    rt
  );
}
static jsi::Value __hostFunction_NativeAudioAPIModuleCxxSpecJSI_checkRecordingPermissions(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeAudioAPIModuleCxxSpecJSI *>(&turboModule)->checkRecordingPermissions(
    rt
  );
}
static jsi::Value __hostFunction_NativeAudioAPIModuleCxxSpecJSI_getDevicesInfo(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeAudioAPIModuleCxxSpecJSI *>(&turboModule)->getDevicesInfo(
    rt
  );
}

NativeAudioAPIModuleCxxSpecJSI::NativeAudioAPIModuleCxxSpecJSI(std::shared_ptr<CallInvoker> jsInvoker)
  : TurboModule("AudioAPIModule", jsInvoker) {
  methodMap_["install"] = MethodMetadata {0, __hostFunction_NativeAudioAPIModuleCxxSpecJSI_install};
  methodMap_["getDevicePreferredSampleRate"] = MethodMetadata {0, __hostFunction_NativeAudioAPIModuleCxxSpecJSI_getDevicePreferredSampleRate};
  methodMap_["setAudioSessionActivity"] = MethodMetadata {1, __hostFunction_NativeAudioAPIModuleCxxSpecJSI_setAudioSessionActivity};
  methodMap_["setAudioSessionOptions"] = MethodMetadata {4, __hostFunction_NativeAudioAPIModuleCxxSpecJSI_setAudioSessionOptions};
  methodMap_["setLockScreenInfo"] = MethodMetadata {1, __hostFunction_NativeAudioAPIModuleCxxSpecJSI_setLockScreenInfo};
  methodMap_["resetLockScreenInfo"] = MethodMetadata {0, __hostFunction_NativeAudioAPIModuleCxxSpecJSI_resetLockScreenInfo};
  methodMap_["enableRemoteCommand"] = MethodMetadata {2, __hostFunction_NativeAudioAPIModuleCxxSpecJSI_enableRemoteCommand};
  methodMap_["observeAudioInterruptions"] = MethodMetadata {1, __hostFunction_NativeAudioAPIModuleCxxSpecJSI_observeAudioInterruptions};
  methodMap_["observeVolumeChanges"] = MethodMetadata {1, __hostFunction_NativeAudioAPIModuleCxxSpecJSI_observeVolumeChanges};
  methodMap_["requestRecordingPermissions"] = MethodMetadata {0, __hostFunction_NativeAudioAPIModuleCxxSpecJSI_requestRecordingPermissions};
  methodMap_["checkRecordingPermissions"] = MethodMetadata {0, __hostFunction_NativeAudioAPIModuleCxxSpecJSI_checkRecordingPermissions};
  methodMap_["getDevicesInfo"] = MethodMetadata {0, __hostFunction_NativeAudioAPIModuleCxxSpecJSI_getDevicesInfo};
}


} // namespace facebook::react
